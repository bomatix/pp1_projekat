

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, COMMA, BOOLCONST, CONST;
terminal Integer NUMCONST;
terminal String IDENT;
terminal Character CHARCONST;
terminal ABSTRACT, CLASS, LPAREN, RPAREN, VOIDD, LBRACKET, RBRACKET, NEW;
terminal IF, BREAK, ELSE, FOR, CONTINUE, RETURN, EXTENDS, PRINT, READ, PLUS, MINUS;
terminal PLUSPLUS, MINUSMINUS, DOT, MUL, DIV, MOD, EQUAL, ISEQUAL, LESS, LESSEQUAL, GRE, GREEQUAL;
terminal AND, OR, ISNOTEQUAL;
terminal PLUSEQUAL, MINUSEQUAL, MULEQUAL, DIVEQUAL, MODEQUAL;

nonterminal DeclList, MethodDeclList, VarIdentList, AssignExprSemi;
nonterminal Decl, ConstDecl, VarDecl, AbstractClassDecl, ClassDecl;
nonterminal ConstIdents, ConstValue, FormParsList;
nonterminal ArrayDecl, TypeVoid, OptionalCondition;
nonterminal AssignOp, RelOp, AddOp, MulOp, ForDesignatorStatement;
nonterminal MethodDecl, VarDeclList, FormPars, EmptyBrackets;
nonterminal AbstractMethodDecl, Extends, AllMethodsDeclList, OptionalDesignatorStatementThird;
nonterminal AllMethodDecl, Statement, StatementList, OptionalMinus;
nonterminal OptionalDesignatorStatement, OptionalPrintParam, DesignatorPars;
nonterminal CondFactExpr, DesignatorStatement, DesignatorStatementExpr, OpenFor, CloseFor;
nonterminal FactorExpr, ActPars, ActParsList, ActParsExpression, ExprList, AssignExpr, ActParsItem;
nonterminal AddopLeft, AddopRight, MulopLeft, MulopRight;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, VarIdent, ConstIdent, DesignatorExpr;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName, FormParItem, ClassName;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expression, Factor, Expr, Term, TermList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct DesignatorList, Designator, ConstType, VarType;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondFact, CondTerm, Condition, OptionalExpr;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

DeclList ::= (Declarations) DeclList Decl | (NoDeclarationList);

Decl ::= (ConstDeclaration) ConstDecl | 
		(VarDeclaration) VarDecl | 
		(AbstractClassDeclaration_) AbstractClassDecl | 
		(ClassDeclaration_) ClassDecl;

ConstDecl ::= (ConstDeclaration_) CONST ConstType ConstIdent ConstIdents SEMI;
ConstIdents ::= (ConstIdents_) ConstIdents COMMA ConstIdent | (NoConstIdents);
ConstIdent ::= (ConstIdent_) IDENT:constName EQUAL ConstValue;
ConstValue ::= (NumConst) NUMCONST | (CharConst) CHARCONST | (BoolConst) BOOLCONST;
ConstType ::= (ConstType) Type;

VarDecl ::= (VarDeclaration_) VarType VarIdentList VarIdent SEMI | (VarDeclError) error SEMI;
VarIdentList ::= (VarIdentList_) VarIdentList VarIdent COMMA | (VarIdentError) error COMMA |(NoVarIdentList);
VarIdent ::= (VarIdent_) IDENT:varIdent ArrayDecl;
VarType ::= (VarType) Type;

ArrayDecl ::= (ArrayDeclaration) ArrayDecl LBRACKET RBRACKET | (NoArrayDeclaration);

TypeVoid ::= (Type_) Type | (Voidd) VOIDD;


MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl | (NoMethodDeclarations);
MethodDecl ::= (MethodDeclaration) MethodName FormPars VarDeclList LBRACE StatementList RBRACE; 
MethodName ::= (MethodNameVoid) VOIDD IDENT:name | (MethodNameType) Type IDENT:name;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl | (NoVarDeclaration);

FormPars ::= (FormPars_) LPAREN FormParsList RPAREN | 
			 (FormParsError) LPAREN error RPAREN:FormParsRParenError  
			 {: parser.report_error("Izvrsen oporavak do ) na liniji " + FormParsRParenErrorleft, null);  :};
			 
FormParsList ::= (FormParsList_) FormParsList COMMA FormParItem | 
				 (FormParsListItem) FormParItem | 
				 (NoFormParsList) |
				 (FormParsListError) error COMMA:FormParsCommaError 
				 {: parser.report_error("Izvrsen oporavak do , na liniji " + FormParsCommaErrorleft, null); :};
				 
FormParItem ::=  (FormParItem) Type IDENT:formParItem EmptyBrackets;


EmptyBrackets ::= (EmptyBrackets_) LBRACKET RBRACKET | (NoEmptyBrackets);

AbstractMethodDecl ::= (AbstractMethodDeclaration) ABSTRACT TypeVoid:varType IDENT:varName FormPars SEMI | 
					   (AbstractMethodDeclarationError) error SEMI:AbstractMethodDeclError
					   {: parser.report_error("Izvrsen oporavak do ; na liniji " + AbstractMethodDeclErrorleft, null); :};

Type ::= (Type) IDENT:typeName;


AbstractClassDecl ::= (AbstractClassDeclaration) ABSTRACT CLASS IDENT Extends LBRACE VarDeclList LBRACE AllMethodsDeclList RBRACE RBRACE;

Extends ::= (Extends_) EXTENDS IDENT | 
			(NoExtends) | 
			(ExtendsError) error:ExtendsError EXTENDS IDENT | 
			(ExtendsErrorAll) error:ExtendsErrorAll
			{: parser.report_error("Izvrsen oporavak do { na liniji " + ExtendsErrorAllleft, null); :};

AllMethodsDeclList ::= (AllMethodsDeclarationList) AllMethodsDeclList AllMethodDecl | (NoAllMethodsDeclarationList);
AllMethodDecl ::= (MethodDeclaration_) MethodDecl | (AbstractMethodDeclaration_) AbstractMethodDecl;

ClassDecl ::= (ClassDeclaration) CLASS ClassName Extends LBRACE VarDeclList LBRACE MethodDeclList RBRACE RBRACE; 

ClassName ::= (ClassName) IDENT:className;

StatementList ::= (StatementList_) StatementList Statement | (NoStatementList);

Statement ::= (DesignatorSt) DesignatorStatementExpr SEMI |
			  (IfElseSt) IF LPAREN Condition RPAREN Statement ELSE Statement |
			  (IfSt) IF LPAREN Condition RPAREN Statement |
			  (ForSt) FOR LPAREN OptionalDesignatorStatement OptionalCondition OptionalDesignatorStatementThird RPAREN OpenFor Statement CloseFor |
			  (BreakSt) BREAK SEMI |
			  (AssignExpression) AssignExprSemi|
			  (ContinueSt) CONTINUE SEMI |
			  (ReturnSt) RETURN OptionalExpr SEMI |
			  (ReadSt) READ LPAREN DesignatorExpr RPAREN SEMI |
			  (PrintSt) PRINT LPAREN Expr OptionalPrintParam RPAREN SEMI |
			  (Statements) LBRACE StatementList RBRACE;
			  
OpenFor ::= (OpenFor);
CloseFor ::= (CloseFor);
			  

OptionalPrintParam ::= (OptionalPrintParam_) COMMA NUMCONST;
OptionalDesignatorStatement ::= (OptionalDesignatorStatement_) DesignatorStatementExpr SEMI | (NoOptionalDesignatorStatement) SEMI | (OptionalAssignStatement) AssignExprSemi;
OptionalDesignatorStatementThird ::= (OptionalDesignatorStatementThird_) DesignatorStatementExpr | (NoOptionalDesignatorStatementThird) | (OptionalAssignStatementThird) AssignExpr;

OptionalCondition ::= (OptionalCondition_) Condition SEMI | (NoOptionalCondition) SEMI | (OptionalConditionError) error SEMI:ConditionError {: parser.report_error("Izvrsen oporavak do ; na liniji " + ConditionErrorleft, null);  :};
 
OptionalExpr ::= (OptionalExpression) Expr | (NoOptionalExpression);
OptionalMinus ::= (Minus) MINUS | (NoMinus);
Expr ::= (Expr) OptionalMinus Expression;
Expression ::= (AddExpression) Expression:te AddOp Term:t | (TermExpression) Term:t;

Term ::= (Term) TermList; 
TermList ::= (TermList_) TermList MulOp Factor | (TermFactor) Factor;

ActParsList ::= (ActParsList_) ActParsList COMMA ActParsItem| (ActPars_) ActParsItem | (NoActParsList); 
ActParsItem ::= (ActParsItem) Expr;

Factor ::= (FactorDesignator) DesignatorExpr DesignatorPars | (FactorNum) NUMCONST | (FactorChar) CHARCONST | (FactorBool) BOOLCONST | (FactorNew) NEW Type FactorExpr | (FactorExpr_) LPAREN Expr RPAREN;
FactorExpr ::= (FactorExpression) LBRACKET Expr RBRACKET;

DesignatorStatementExpr ::= (DesignatorStatementExpression) DesignatorExpr DesignatorStatement; 
DesignatorStatement ::= (DesignatorActPars) LPAREN ActParsList RPAREN | (DesignatorPlusPlus) PLUSPLUS | (DesignatorMinusMinus) MINUSMINUS;

AssignExpr ::= (AssignExpr_) DesignatorExpr AssignOp Expr;
AssignExprSemi ::= (AssignExprSemi_) AssignExpr SEMI | (AssignExprSemiError) error SEMI:AError {: parser.report_error("Izvrsen oporavak do ; na liniji " + AErrorleft, null); :};

Condition ::= (ConditionList) Condition OR CondTerm | (ConditionItem) CondTerm ;
CondTerm ::= (ConditionTermList) CondTerm AND CondFact | (ConditionTermItem) CondFact;
CondFact ::= (ConditionFact) Expr RelOp Expr | (ConditionFactExpr) Expr;


DesignatorPars ::= (DesignatorPars_) LPAREN ActParsList RPAREN | (NoDesignatorPars);

DesignatorExpr ::= (DesignatorExpr) IDENT:varName DesignatorList;
DesignatorList ::= (DesignatorsList) DesignatorList Designator | (NoDesignatorList);
Designator ::= (DesignatorDot) DOT IDENT:fieldName | (DesignatorArr) LBRACKET Expr:index RBRACKET;

AssignOp ::= (Assign) EQUAL | (AddopRightAssign) AddopRight | (MulopRightAssign) MulopRight;

AddOp ::= (AddopLeft_) AddopLeft | (AddopRight_) AddopRight;
AddopLeft ::= (Add) PLUS | (Subtract) MINUS;
AddopRight ::= (PlusEqual) PLUSEQUAL | (MinusEqual) MINUSEQUAL;

MulOp ::= (MulopLeft_) MulopLeft | (MulopRight_) MulopRight;
MulopLeft ::= (Multiply) MUL | (Divide) DIV | (Mod) MOD;
MulopRight ::= (MulEqual) MULEQUAL | (DivEqual) DIVEQUAL | (ModEqual) MODEQUAL;

RelOp ::= (Equal) ISEQUAL | (NotEqual) ISNOTEQUAL | (Greater) GRE | (GreaterEqual) GREEQUAL | (Less) LESS | (LessEqual) LESSEQUAL;
