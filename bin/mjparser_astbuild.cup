

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, COMMA, CONST;
terminal Integer NUMCONST;
terminal String IDENT, BOOLCONST;
terminal Character CHARCONST;
terminal ABSTRACT, CLASS, LPAREN, RPAREN, VOIDD, LBRACKET, RBRACKET, NEW;
terminal IF, BREAK, ELSE, FOR, CONTINUE, RETURN, EXTENDS, PRINT, READ, PLUS, MINUS;
terminal PLUSPLUS, MINUSMINUS, DOT, MUL, DIV, MOD, EQUAL, ISEQUAL, LESS, LESSEQUAL, GRE, GREEQUAL;
terminal AND, OR, ISNOTEQUAL;
terminal PLUSEQUAL, MINUSEQUAL, MULEQUAL, DIVEQUAL, MODEQUAL;

nonterminal DeclList DeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarIdentList VarIdentList;
nonterminal AssignExprSemi AssignExprSemi;
nonterminal LParen_ LParen_;
nonterminal RParen_ RParen_;
nonterminal LBracket_ LBracket_;
nonterminal RBracket_ RBracket_;
nonterminal Decl Decl;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal AbstractClassDecl AbstractClassDecl;
nonterminal ClassDecl ClassDecl;
nonterminal ConstIdents ConstIdents;
nonterminal ConstValue ConstValue;
nonterminal FormParsList FormParsList;
nonterminal ArrayDecl ArrayDecl;
nonterminal TypeVoid TypeVoid;
nonterminal OptionalCondition OptionalCondition;
nonterminal AssignOp AssignOp;
nonterminal RelOp RelOp;
nonterminal AddOp AddOp;
nonterminal MulOp MulOp;
nonterminal ForDesignatorStatement ForDesignatorStatement;
nonterminal MethodDecl MethodDecl;
nonterminal VarDeclList VarDeclList;
nonterminal FormPars FormPars;
nonterminal EmptyBrackets EmptyBrackets;
nonterminal AbstractMethodDecl AbstractMethodDecl;
nonterminal Extends Extends;
nonterminal AllMethodsDeclList AllMethodsDeclList;
nonterminal OptionalDesignatorStatementThird OptionalDesignatorStatementThird;
nonterminal AllMethodDecl AllMethodDecl;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal OptionalMinus OptionalMinus;
nonterminal OptionalDesignatorStatement OptionalDesignatorStatement;
nonterminal OptionalPrintParam OptionalPrintParam;
nonterminal DesignatorPars DesignatorPars;
nonterminal CondFactExpr CondFactExpr;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesignatorStatementExpr DesignatorStatementExpr;
nonterminal OpenFor OpenFor;
nonterminal CloseFor CloseFor;
nonterminal FactorExpr FactorExpr;
nonterminal ActPars ActPars;
nonterminal ActParsList ActParsList;
nonterminal ActParsExpression ActParsExpression;
nonterminal ExprList ExprList;
nonterminal AssignExpr AssignExpr;
nonterminal ActParsItem ActParsItem;
nonterminal AddopLeft AddopLeft;
nonterminal AddopRight AddopRight;
nonterminal MulopLeft MulopLeft;
nonterminal MulopRight MulopRight;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, VarIdent, ConstIdent, DesignatorExpr, DesignatorName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName, FormParItem, ClassName;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expression, Factor, Expr, Term, TermList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct DesignatorList, Designator, ConstType, VarType;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondFact, CondTerm, Condition, OptionalExpr;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

DeclList ::= (Declarations) DeclList:D1 Decl:D2 {: RESULT=new Declarations(D1, D2); RESULT.setLine(D1left); :} | (NoDeclarationList) {: RESULT=new NoDeclarationList(); :};

Decl ::= (ConstDeclaration) ConstDecl:C1 {: RESULT=new ConstDeclaration(C1); RESULT.setLine(C1left); :} | 
		(VarDeclaration) VarDecl:V1 {: RESULT=new VarDeclaration(V1); RESULT.setLine(V1left); :} | 
		(AbstractClassDeclaration_) AbstractClassDecl:A1 {: RESULT=new AbstractClassDeclaration_(A1); RESULT.setLine(A1left); :} | 
		(ClassDeclaration_) ClassDecl:C1 {: RESULT=new ClassDeclaration_(C1); RESULT.setLine(C1left); :};

ConstDecl ::= (ConstDeclaration_) CONST ConstType:C1 ConstIdent:C2 ConstIdents:C3 SEMI {: RESULT=new ConstDeclaration_(C1, C2, C3); RESULT.setLine(C1left); :};
ConstIdents ::= (ConstIdents_) ConstIdents:C1 COMMA ConstIdent:C2 {: RESULT=new ConstIdents_(C1, C2); RESULT.setLine(C1left); :} | (NoConstIdents) {: RESULT=new NoConstIdents(); :};
ConstIdent ::= (ConstIdent_) IDENT:constName EQUAL ConstValue:C1 {: RESULT=new ConstIdent_(constName, C1); RESULT.setLine(constNameleft); :};
ConstValue ::= (NumConst) NUMCONST:N1 {: RESULT=new NumConst(N1); RESULT.setLine(N1left); :} | (CharConst) CHARCONST:C1 {: RESULT=new CharConst(C1); RESULT.setLine(C1left); :} | (BoolConst) BOOLCONST:B1 {: RESULT=new BoolConst(B1); RESULT.setLine(B1left); :};
ConstType ::= (ConstType) Type:T1 {: RESULT=new ConstType(T1); RESULT.setLine(T1left); :};

VarDecl ::= (VarDeclaration_) VarType:V1 VarIdentList:V2 VarIdent:V3 SEMI {: RESULT=new VarDeclaration_(V1, V2, V3); RESULT.setLine(V1left); :} | (VarDeclError) error SEMI {: RESULT=new VarDeclError(); :};
VarIdentList ::= (VarIdentList_) VarIdentList:V1 VarIdent:V2 COMMA {: RESULT=new VarIdentList_(V1, V2); RESULT.setLine(V1left); :} | (VarIdentError) error COMMA {: RESULT=new VarIdentError(); :} |(NoVarIdentList) {: RESULT=new NoVarIdentList(); :};
VarIdent ::= (VarIdent_) IDENT:varIdent ArrayDecl:A1 {: RESULT=new VarIdent_(varIdent, A1); RESULT.setLine(varIdentleft); :};
VarType ::= (VarType) Type:T1 {: RESULT=new VarType(T1); RESULT.setLine(T1left); :};

ArrayDecl ::= (ArrayDeclaration) ArrayDecl:A1 LBRACKET RBRACKET {: RESULT=new ArrayDeclaration(A1); RESULT.setLine(A1left); :} | (NoArrayDeclaration) {: RESULT=new NoArrayDeclaration(); :};

TypeVoid ::= (Type_) Type:T1 {: RESULT=new Type_(T1); RESULT.setLine(T1left); :} | (Voidd) VOIDD {: RESULT=new Voidd(); :};


MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :} | (NoMethodDeclarations) {: RESULT=new NoMethodDeclarations(); :};
MethodDecl ::= (MethodDeclaration) MethodName:M1 FormPars:F2 VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclaration(M1, F2, V3, S4); RESULT.setLine(M1left); :}; 
MethodName ::= (MethodNameVoid) VOIDD IDENT:name {: RESULT=new MethodNameVoid(name); RESULT.setLine(nameleft); :} | (MethodNameType) Type:T1 IDENT:name {: RESULT=new MethodNameType(T1, name); RESULT.setLine(T1left); :};

VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :} | (NoVarDeclaration) {: RESULT=new NoVarDeclaration(); :};

FormPars ::= (FormPars_) LPAREN FormParsList:F1 RPAREN {: RESULT=new FormPars_(F1); RESULT.setLine(F1left); :} | 
			 (FormParsError) LPAREN error RPAREN:FormParsRParenError  
			 {: parser.report_error("Izvrsen oporavak do ) na liniji " + FormParsRParenErrorleft, null);  :} {: RESULT=new FormParsError(); :};
			 
FormParsList ::= (FormParsList_) FormParsList:F1 COMMA FormParItem:F2 {: RESULT=new FormParsList_(F1, F2); RESULT.setLine(F1left); :} | 
				 (FormParsListItem) FormParItem:F1 {: RESULT=new FormParsListItem(F1); RESULT.setLine(F1left); :} | 
				 (NoFormParsList) {: RESULT=new NoFormParsList(); :} |
				 (FormParsListError) error COMMA:FormParsCommaError 
				 {: parser.report_error("Izvrsen oporavak do , na liniji " + FormParsCommaErrorleft, null); :} {: RESULT=new FormParsListError(); :};
				 
FormParItem ::=  (FormParItem) Type:T1 IDENT:formParItem EmptyBrackets:E2 {: RESULT=new FormParItem(T1, formParItem, E2); RESULT.setLine(T1left); :};


EmptyBrackets ::= (EmptyBrackets_) LBracket_:L1 RBracket_:R2 {: RESULT=new EmptyBrackets_(L1, R2); RESULT.setLine(L1left); :} | (NoEmptyBrackets) {: RESULT=new NoEmptyBrackets(); :};

AbstractMethodDecl ::= (AbstractMethodDeclaration) ABSTRACT TypeVoid:varType IDENT:varName FormPars:F1 SEMI {: RESULT=new AbstractMethodDeclaration(varType, varName, F1); RESULT.setLine(varTypeleft); :} | 
					   (AbstractMethodDeclarationError) error SEMI:AbstractMethodDeclError
					   {: parser.report_error("Izvrsen oporavak do ; na liniji " + AbstractMethodDeclErrorleft, null); :} {: RESULT=new AbstractMethodDeclarationError(); :};

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};


AbstractClassDecl ::= (AbstractClassDeclaration) ABSTRACT CLASS IDENT:I1 Extends:E2 LBRACE VarDeclList:V3 LBRACE AllMethodsDeclList:A4 RBRACE RBRACE {: RESULT=new AbstractClassDeclaration(I1, E2, V3, A4); RESULT.setLine(I1left); :};

Extends ::= (Extends_) EXTENDS IDENT:I1 {: RESULT=new Extends_(I1); RESULT.setLine(I1left); :} | 
			(NoExtends) {: RESULT=new NoExtends(); :} | 
			(ExtendsError) error:ExtendsError EXTENDS IDENT:I1 {: RESULT=new ExtendsError(I1); RESULT.setLine(I1left); :} | 
			(ExtendsErrorAll) error:ExtendsErrorAll
			{: parser.report_error("Izvrsen oporavak do { na liniji " + ExtendsErrorAllleft, null); :} {: RESULT=new ExtendsErrorAll(); :};

AllMethodsDeclList ::= (AllMethodsDeclarationList) AllMethodsDeclList:A1 AllMethodDecl:A2 {: RESULT=new AllMethodsDeclarationList(A1, A2); RESULT.setLine(A1left); :} | (NoAllMethodsDeclarationList) {: RESULT=new NoAllMethodsDeclarationList(); :};
AllMethodDecl ::= (MethodDeclaration_) MethodDecl:M1 {: RESULT=new MethodDeclaration_(M1); RESULT.setLine(M1left); :} | (AbstractMethodDeclaration_) AbstractMethodDecl:A1 {: RESULT=new AbstractMethodDeclaration_(A1); RESULT.setLine(A1left); :};

ClassDecl ::= (ClassDeclaration) CLASS ClassName:C1 Extends:E2 LBRACE VarDeclList:V3 LBRACE MethodDeclList:M4 RBRACE RBRACE {: RESULT=new ClassDeclaration(C1, E2, V3, M4); RESULT.setLine(C1left); :}; 

ClassName ::= (ClassName) IDENT:className {: RESULT=new ClassName(className); RESULT.setLine(classNameleft); :};

StatementList ::= (StatementList_) StatementList:S1 Statement:S2 {: RESULT=new StatementList_(S1, S2); RESULT.setLine(S1left); :} | (NoStatementList) {: RESULT=new NoStatementList(); :};

Statement ::= (DesignatorSt) DesignatorStatementExpr:D1 SEMI {: RESULT=new DesignatorSt(D1); RESULT.setLine(D1left); :} |
			  (IfElseSt) IF LPAREN Condition:C1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new IfElseSt(C1, S2, S3); RESULT.setLine(C1left); :} |
			  (IfSt) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new IfSt(C1, S2); RESULT.setLine(C1left); :} |
			  (ForSt) FOR LPAREN OptionalDesignatorStatement:O1 OptionalCondition:O2 OptionalDesignatorStatementThird:O3 RPAREN OpenFor:O4 Statement:S5 CloseFor:C6 {: RESULT=new ForSt(O1, O2, O3, O4, S5, C6); RESULT.setLine(O1left); :} |
			  (BreakSt) BREAK SEMI {: RESULT=new BreakSt(); :} |
			  (AssignExpression) AssignExprSemi:A1 {: RESULT=new AssignExpression(A1); RESULT.setLine(A1left); :}|
			  (ContinueSt) CONTINUE SEMI {: RESULT=new ContinueSt(); :} |
			  (ReturnSt) RETURN OptionalExpr:O1 SEMI {: RESULT=new ReturnSt(O1); RESULT.setLine(O1left); :} |
			  (ReadSt) READ LPAREN DesignatorExpr:D1 RPAREN SEMI {: RESULT=new ReadSt(D1); RESULT.setLine(D1left); :} |
			  (PrintSt) PRINT LPAREN Expr:E1 OptionalPrintParam:O2 RPAREN SEMI {: RESULT=new PrintSt(E1, O2); RESULT.setLine(E1left); :} |
			  (Statements) LBRACE StatementList:S1 RBRACE {: RESULT=new Statements(S1); RESULT.setLine(S1left); :};
			  
OpenFor ::= (OpenFor) {: RESULT=new OpenFor(); :};
CloseFor ::= (CloseFor) {: RESULT=new CloseFor(); :};
			  

OptionalPrintParam ::= (OptionalPrintParam_) COMMA NUMCONST:N1 {: RESULT=new OptionalPrintParam_(N1); RESULT.setLine(N1left); :} | (NoOptionalPrintParam) {: RESULT=new NoOptionalPrintParam(); :};
OptionalDesignatorStatement ::= (OptionalDesignatorStatement_) DesignatorStatementExpr:D1 SEMI {: RESULT=new OptionalDesignatorStatement_(D1); RESULT.setLine(D1left); :} | (NoOptionalDesignatorStatement) SEMI {: RESULT=new NoOptionalDesignatorStatement(); :} | (OptionalAssignStatement) AssignExprSemi:A1 {: RESULT=new OptionalAssignStatement(A1); RESULT.setLine(A1left); :};
OptionalDesignatorStatementThird ::= (OptionalDesignatorStatementThird_) DesignatorStatementExpr:D1 {: RESULT=new OptionalDesignatorStatementThird_(D1); RESULT.setLine(D1left); :} | (NoOptionalDesignatorStatementThird) {: RESULT=new NoOptionalDesignatorStatementThird(); :} | (OptionalAssignStatementThird) AssignExpr:A1 {: RESULT=new OptionalAssignStatementThird(A1); RESULT.setLine(A1left); :};

OptionalCondition ::= (OptionalCondition_) Condition:C1 SEMI {: RESULT=new OptionalCondition_(C1); RESULT.setLine(C1left); :} | (NoOptionalCondition) SEMI {: RESULT=new NoOptionalCondition(); :} | (OptionalConditionError) error SEMI:ConditionError {: parser.report_error("Izvrsen oporavak do ; na liniji " + ConditionErrorleft, null);  :} {: RESULT=new OptionalConditionError(); :};
 
OptionalExpr ::= (OptionalExpression) Expr:E1 {: RESULT=new OptionalExpression(E1); RESULT.setLine(E1left); :} | (NoOptionalExpression) {: RESULT=new NoOptionalExpression(); :};
OptionalMinus ::= (Minus) MINUS {: RESULT=new Minus(); :} | (NoMinus) {: RESULT=new NoMinus(); :};
Expr ::= (Expr) Expression:E1 {: RESULT=new Expr(E1); RESULT.setLine(E1left); :};
Expression ::= (AddExpression) Expression:te AddOp:A1 Term:t {: RESULT=new AddExpression(te, A1, t); RESULT.setLine(teleft); :} | (TermExpression) Term:t {: RESULT=new TermExpression(t); RESULT.setLine(tleft); :} | (NegativeTermExpression) MINUS Term:T1 {: RESULT=new NegativeTermExpression(T1); RESULT.setLine(T1left); :};

Term ::= (Term) TermList:T1 {: RESULT=new Term(T1); RESULT.setLine(T1left); :}; 
TermList ::= (TermList_) TermList:T1 MulOp:M2 Factor:F3 {: RESULT=new TermList_(T1, M2, F3); RESULT.setLine(T1left); :} | (TermFactor) Factor:F1 {: RESULT=new TermFactor(F1); RESULT.setLine(F1left); :};

ActParsList ::= (ActParsList_) ActParsList:A1 COMMA ActParsItem:A2 {: RESULT=new ActParsList_(A1, A2); RESULT.setLine(A1left); :}| (ActPars_) ActParsItem:A1 {: RESULT=new ActPars_(A1); RESULT.setLine(A1left); :} | (NoActParsList) {: RESULT=new NoActParsList(); :}; 
ActParsItem ::= (ActParsItem) Expr:E1 {: RESULT=new ActParsItem(E1); RESULT.setLine(E1left); :};

Factor ::= (FactorDesignator) DesignatorExpr:D1 DesignatorPars:D2 {: RESULT=new FactorDesignator(D1, D2); RESULT.setLine(D1left); :} | (FactorNum) NUMCONST:N1 {: RESULT=new FactorNum(N1); RESULT.setLine(N1left); :} | (FactorChar) CHARCONST:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :} | (FactorBool) BOOLCONST:B1 {: RESULT=new FactorBool(B1); RESULT.setLine(B1left); :} | (FactorNew) NEW Type:T1 FactorExpr:F2 {: RESULT=new FactorNew(T1, F2); RESULT.setLine(T1left); :} | (FactorExpr_) LParen_:L1 Expr:E2 RParen_:R3 {: RESULT=new FactorExpr_(L1, E2, R3); RESULT.setLine(L1left); :};
FactorExpr ::= (FactorExpression) LBRACKET Expr:E1 RBRACKET {: RESULT=new FactorExpression(E1); RESULT.setLine(E1left); :} | (NoFactorExpression) {: RESULT=new NoFactorExpression(); :};

DesignatorStatementExpr ::= (DesignatorStatementExpression) DesignatorExpr:D1 DesignatorStatement:D2 {: RESULT=new DesignatorStatementExpression(D1, D2); RESULT.setLine(D1left); :}; 
DesignatorStatement ::= (DesignatorActPars) LPAREN ActParsList:A1 RPAREN {: RESULT=new DesignatorActPars(A1); RESULT.setLine(A1left); :} | (DesignatorPlusPlus) PLUSPLUS {: RESULT=new DesignatorPlusPlus(); :} | (DesignatorMinusMinus) MINUSMINUS {: RESULT=new DesignatorMinusMinus(); :};

AssignExpr ::= (AssignExpr_) DesignatorExpr:D1 AssignOp:A2 Expr:E3 {: RESULT=new AssignExpr_(D1, A2, E3); RESULT.setLine(D1left); :};
AssignExprSemi ::= (AssignExprSemi_) AssignExpr:A1 SEMI {: RESULT=new AssignExprSemi_(A1); RESULT.setLine(A1left); :} | (AssignExprSemiError) error SEMI:AError {: parser.report_error("Izvrsen oporavak do ; na liniji " + AErrorleft, null); :} {: RESULT=new AssignExprSemiError(); :};

Condition ::= (ConditionList) Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionList(C1, C2); RESULT.setLine(C1left); :} | (ConditionItem) CondTerm:C1 {: RESULT=new ConditionItem(C1); RESULT.setLine(C1left); :};
CondTerm ::= (ConditionTermList) CondTerm:C1 AND CondFact:C2 {: RESULT=new ConditionTermList(C1, C2); RESULT.setLine(C1left); :} | (ConditionTermItem) CondFact:C1 {: RESULT=new ConditionTermItem(C1); RESULT.setLine(C1left); :};
CondFact ::= (ConditionFact) Expr:E1 RelOp:R2 Expr:E3 {: RESULT=new ConditionFact(E1, R2, E3); RESULT.setLine(E1left); :} | (ConditionFactExpr) Expr:E1 {: RESULT=new ConditionFactExpr(E1); RESULT.setLine(E1left); :};


DesignatorPars ::= (DesignatorPars_) LPAREN ActParsList:A1 RPAREN {: RESULT=new DesignatorPars_(A1); RESULT.setLine(A1left); :} | (NoDesignatorPars) {: RESULT=new NoDesignatorPars(); :};

DesignatorExpr ::= (DesignatorExpr) DesignatorName:D1 DesignatorList:D2 {: RESULT=new DesignatorExpr(D1, D2); RESULT.setLine(D1left); :};
DesignatorName ::= (DesignatorName) IDENT:varName {: RESULT=new DesignatorName(varName); RESULT.setLine(varNameleft); :};
DesignatorList ::= (DesignatorsList) DesignatorList:D1 Designator:D2 {: RESULT=new DesignatorsList(D1, D2); RESULT.setLine(D1left); :} | (NoDesignatorList) {: RESULT=new NoDesignatorList(); :};
Designator ::= (DesignatorDot) DOT IDENT:fieldName {: RESULT=new DesignatorDot(fieldName); RESULT.setLine(fieldNameleft); :} | (DesignatorArr) LBracket_:L1 Expr:index RBracket_:R2 {: RESULT=new DesignatorArr(L1, index, R2); RESULT.setLine(L1left); :};

LBracket_ ::= (LBracket_) LBRACKET {: RESULT=new LBracket_(); :};
RBracket_ ::= (RBracket_) RBRACKET {: RESULT=new RBracket_(); :};

LParen_ ::= (LParen_) LPAREN {: RESULT=new LParen_(); :};
RParen_ ::= (RParen_) RPAREN {: RESULT=new RParen_(); :};

AssignOp ::= (Assign) EQUAL {: RESULT=new Assign(); :} | (AddopRightAssign) AddopRight:A1 {: RESULT=new AddopRightAssign(A1); RESULT.setLine(A1left); :} | (MulopRightAssign) MulopRight:M1 {: RESULT=new MulopRightAssign(M1); RESULT.setLine(M1left); :};

AddOp ::= (AddopLeft_) AddopLeft:A1 {: RESULT=new AddopLeft_(A1); RESULT.setLine(A1left); :} | (AddopRight_) AddopRight:A1 {: RESULT=new AddopRight_(A1); RESULT.setLine(A1left); :};
AddopLeft ::= (Add) PLUS {: RESULT=new Add(); :} | (Subtract) MINUS {: RESULT=new Subtract(); :};
AddopRight ::= (PlusEqual) PLUSEQUAL {: RESULT=new PlusEqual(); :} | (MinusEqual) MINUSEQUAL {: RESULT=new MinusEqual(); :};

MulOp ::= (MulopLeft_) MulopLeft:M1 {: RESULT=new MulopLeft_(M1); RESULT.setLine(M1left); :} | (MulopRight_) MulopRight:M1 {: RESULT=new MulopRight_(M1); RESULT.setLine(M1left); :};
MulopLeft ::= (Multiply) MUL {: RESULT=new Multiply(); :} | (Divide) DIV {: RESULT=new Divide(); :} | (Mod) MOD {: RESULT=new Mod(); :};
MulopRight ::= (MulEqual) MULEQUAL {: RESULT=new MulEqual(); :} | (DivEqual) DIVEQUAL {: RESULT=new DivEqual(); :} | (ModEqual) MODEQUAL {: RESULT=new ModEqual(); :};

RelOp ::= (Equal) ISEQUAL {: RESULT=new Equal(); :} | (NotEqual) ISNOTEQUAL {: RESULT=new NotEqual(); :} | (Greater) GRE {: RESULT=new Greater(); :} | (GreaterEqual) GREEQUAL {: RESULT=new GreaterEqual(); :} | (Less) LESS {: RESULT=new Less(); :} | (LessEqual) LESSEQUAL {: RESULT=new LessEqual(); :};
