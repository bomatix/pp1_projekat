
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun May 17 11:52:18 CEST 2020
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Sun May 17 11:52:18 CEST 2020
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\003\010\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\010\011\000" +
    "\002\015\007\000\002\015\002\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\011\006\000\002\021" +
    "\006\000\002\021\002\000\002\020\005\000\002\020\002" +
    "\000\002\022\003\000\002\022\003\000\002\005\004\000" +
    "\002\005\002\000\002\030\013\000\002\031\004\000\002" +
    "\031\002\000\002\017\005\000\002\017\003\000\002\017" +
    "\002\000\002\032\005\000\002\033\004\000\002\033\002" +
    "\000\002\034\011\000\002\014\003\000\002\012\014\000" +
    "\002\035\004\000\002\035\002\000\002\036\004\000\002" +
    "\036\002\000\002\037\003\000\002\037\003\000\002\013" +
    "\013\000\002\041\004\000\002\041\002\000\002\040\004" +
    "\000\002\040\011\000\002\040\007\000\002\040\013\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\040\005\000\002\040\007\000\002\040\010\000\002\040" +
    "\005\000\002\045\004\000\002\044\003\000\002\044\002" +
    "\000\002\023\003\000\002\023\002\000\002\043\003\000" +
    "\002\043\002\000\002\042\004\000\002\042\005\000\002" +
    "\071\005\000\002\071\002\000\002\070\004\000\002\067" +
    "\005\000\002\067\002\000\002\066\004\000\002\066\002" +
    "\000\002\065\004\000\002\065\002\000\002\064\004\000" +
    "\002\063\004\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\005\000\002\063\005\000\002\062" +
    "\005\000\002\061\004\000\002\060\004\000\002\060\005" +
    "\000\002\060\003\000\002\060\003\000\002\057\004\000" +
    "\002\056\005\000\002\056\002\000\002\055\004\000\002" +
    "\054\005\000\002\054\002\000\002\053\004\000\002\052" +
    "\004\000\002\052\002\000\002\051\005\000\002\051\002" +
    "\000\002\050\004\000\002\047\004\000\002\047\002\000" +
    "\002\046\004\000\002\046\005\000\002\024\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\004\005\001\002\000\004\002\320\001" +
    "\002\000\004\014\006\001\002\000\014\005\ufffe\012\ufffe" +
    "\014\ufffe\016\ufffe\017\ufffe\001\002\000\014\005\011\012" +
    "\022\014\014\016\013\017\021\001\002\000\004\014\313" +
    "\001\002\000\010\006\uffeb\014\uffeb\022\uffeb\001\002\000" +
    "\014\005\uffff\012\uffff\014\uffff\016\uffff\017\uffff\001\002" +
    "\000\004\017\266\001\002\000\006\014\uffe0\023\uffe0\001" +
    "\002\000\014\005\ufffc\012\ufffc\014\ufffc\016\ufffc\017\ufffc" +
    "\001\002\000\014\005\ufffa\012\ufffa\014\ufffa\016\ufffa\017" +
    "\ufffa\001\002\000\014\005\ufffb\012\ufffb\014\ufffb\016\ufffb" +
    "\017\ufffb\001\002\000\014\005\ufffd\012\ufffd\014\ufffd\016" +
    "\ufffd\017\ufffd\001\002\000\004\014\040\001\002\000\004" +
    "\014\014\001\002\000\004\014\024\001\002\000\004\047" +
    "\025\001\002\000\010\011\030\013\026\015\031\001\002" +
    "\000\006\007\ufff6\010\ufff6\001\002\000\006\007\ufff7\010" +
    "\ufff7\001\002\000\006\007\ufff4\010\ufff4\001\002\000\006" +
    "\007\ufff5\010\ufff5\001\002\000\006\007\034\010\033\001" +
    "\002\000\004\014\035\001\002\000\014\005\ufff9\012\ufff9" +
    "\014\ufff9\016\ufff9\017\ufff9\001\002\000\004\047\036\001" +
    "\002\000\010\011\030\013\026\015\031\001\002\000\006" +
    "\007\ufff8\010\ufff8\001\002\000\006\005\uffdd\034\041\001" +
    "\002\000\004\014\265\001\002\000\004\005\043\001\002" +
    "\000\006\005\uffe8\014\uffe8\001\002\000\006\005\045\014" +
    "\014\001\002\000\010\006\uffeb\014\uffeb\022\uffeb\001\002" +
    "\000\006\005\uffe9\014\uffe9\001\002\000\010\006\052\014" +
    "\014\022\054\001\002\000\004\014\uffee\001\002\000\004" +
    "\014\056\001\002\000\004\006\055\001\002\000\010\006" +
    "\uffec\014\uffec\022\uffec\001\002\000\004\014\uffed\001\002" +
    "\000\014\005\uffd8\012\uffd8\014\uffd8\016\uffd8\017\uffd8\001" +
    "\002\000\004\020\057\001\002\000\010\010\uffe5\014\014" +
    "\021\uffe5\001\002\000\004\014\261\001\002\000\006\010" +
    "\063\021\064\001\002\000\006\010\uffe6\021\uffe6\001\002" +
    "\000\004\014\014\001\002\000\006\005\uffe8\014\uffe8\001" +
    "\002\000\006\005\066\014\014\001\002\000\030\003\uffd6" +
    "\005\uffd6\006\uffd6\014\uffd6\026\uffd6\027\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\035\uffd6\036\uffd6\001\002\000\030\003\076" +
    "\005\071\006\104\014\072\026\074\027\105\031\073\032" +
    "\102\033\103\035\077\036\070\001\002\000\004\020\254" +
    "\001\002\000\030\003\uffd6\005\uffd6\006\uffd6\014\uffd6\026" +
    "\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6" +
    "\001\002\000\060\007\uff9e\010\uff9e\020\uff9e\021\uff9e\023" +
    "\uff9e\024\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052" +
    "\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\001\002" +
    "\000\004\020\231\001\002\000\004\020\201\001\002\000" +
    "\030\003\uffd7\005\uffd7\006\uffd7\014\uffd7\026\uffd7\027\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\035\uffd7\036\uffd7\001\002\000" +
    "\004\007\200\001\002\000\004\020\171\001\002\000\012" +
    "\020\163\041\165\042\162\047\161\001\002\000\004\007" +
    "\157\001\002\000\004\007\156\001\002\000\022\007\uffc4" +
    "\011\uffc0\013\uffc0\014\uffc0\015\uffc0\020\uffc0\025\uffc0\040" +
    "\111\001\002\000\012\006\uffea\014\uffea\016\uffea\022\uffea" +
    "\001\002\000\004\007\106\001\002\000\032\003\uffd1\005" +
    "\uffd1\006\uffd1\014\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\035\uffd1\036\uffd1\001\002\000\016\011" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\020\uffbd\025\uffbd\001\002" +
    "\000\004\007\uffc5\001\002\000\016\011\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\020\uffc0\025\uffc0\001\002\000\004\007\113" +
    "\001\002\000\032\003\uffce\005\uffce\006\uffce\014\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035\uffce" +
    "\036\uffce\001\002\000\016\011\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\020\uffbd\025\uffbd\001\002\000\036\007\uffc2\010\uffc2" +
    "\021\uffc2\024\uffc2\037\152\040\153\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\001\002" +
    "\000\016\011\124\013\121\014\072\015\125\020\122\025" +
    "\120\001\002\000\044\007\uffbf\010\uffbf\021\uffbf\024\uffbf" +
    "\037\uffbf\040\uffbf\044\147\045\150\046\146\050\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\001\002\000\004\014\014\001\002\000\044\007\uffb6\010" +
    "\uffb6\021\uffb6\024\uffb6\037\uffb6\040\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\001\002\000\020\011\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\020\uffc0\025\uffc0\040\111\001\002\000" +
    "\046\007\uffa1\010\uffa1\020\127\021\uffa1\024\uffa1\037\uffa1" +
    "\040\uffa1\044\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\001\002" +
    "\000\044\007\uffb4\010\uffb4\021\uffb4\024\uffb4\037\uffb4\040" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\001\002\000" +
    "\044\007\uffb5\010\uffb5\021\uffb5\024\uffb5\037\uffb5\040\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\050\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\001\002\000\044" +
    "\007\uffb7\010\uffb7\021\uffb7\024\uffb7\037\uffb7\040\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\001\002\000\022\011" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\020\uffc0\021\uffbb\025\uffc0" +
    "\040\111\001\002\000\004\021\136\001\002\000\006\010" +
    "\uffb9\021\uffb9\001\002\000\006\010\133\021\uffbc\001\002" +
    "\000\020\011\uffc0\013\uffc0\014\uffc0\015\uffc0\020\uffc0\025" +
    "\uffc0\040\111\001\002\000\006\010\uffba\021\uffba\001\002" +
    "\000\006\010\uffb8\021\uffb8\001\002\000\044\007\uffa2\010" +
    "\uffa2\021\uffa2\024\uffa2\037\uffa2\040\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\057\uffa2\001\002\000\004\021\140\001\002" +
    "\000\044\007\uffb2\010\uffb2\021\uffb2\024\uffb2\037\uffb2\040" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\001\002\000" +
    "\004\023\143\001\002\000\044\007\uffb3\010\uffb3\021\uffb3" +
    "\024\uffb3\037\uffb3\040\uffb3\044\uffb3\045\uffb3\046\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\001\002\000\020\011\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\020\uffc0\025\uffc0\040\111\001\002\000\004\024\145" +
    "\001\002\000\044\007\uffb1\010\uffb1\021\uffb1\024\uffb1\037" +
    "\uffb1\040\uffb1\044\uffb1\045\uffb1\046\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\001" +
    "\002\000\016\011\uff90\013\uff90\014\uff90\015\uff90\020\uff90" +
    "\025\uff90\001\002\000\016\011\uff92\013\uff92\014\uff92\015" +
    "\uff92\020\uff92\025\uff92\001\002\000\016\011\uff91\013\uff91" +
    "\014\uff91\015\uff91\020\uff91\025\uff91\001\002\000\016\011" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\020\uffbe\025\uffbe\001\002" +
    "\000\016\011\uff94\013\uff94\014\uff94\015\uff94\020\uff94\025" +
    "\uff94\001\002\000\016\011\uff93\013\uff93\014\uff93\015\uff93" +
    "\020\uff93\025\uff93\001\002\000\016\011\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\020\uffc1\025\uffc1\001\002\000\036\007\uffc3" +
    "\010\uffc3\021\uffc3\024\uffc3\037\152\040\153\050\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3" +
    "\001\002\000\032\003\uffcf\005\uffcf\006\uffcf\014\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\035\uffcf" +
    "\036\uffcf\001\002\000\032\003\uffd5\005\uffd5\006\uffd5\014" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\035\uffd5\036\uffd5\001\002\000\020\011\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\020\uffc0\025\uffc0\040\111\001\002\000\020" +
    "\011\uff9b\013\uff9b\014\uff9b\015\uff9b\020\uff9b\025\uff9b\040" +
    "\uff9b\001\002\000\006\007\uffac\021\uffac\001\002\000\022" +
    "\011\uffc0\013\uffc0\014\uffc0\015\uffc0\020\uffc0\021\uffbb\025" +
    "\uffc0\040\111\001\002\000\006\007\uffb0\021\uffb0\001\002" +
    "\000\006\007\uffad\021\uffad\001\002\000\004\021\167\001" +
    "\002\000\006\007\uffae\021\uffae\001\002\000\006\007\uffaf" +
    "\021\uffaf\001\002\000\020\011\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\020\uffc0\025\uffc0\040\111\001\002\000\004\010\173" +
    "\001\002\000\004\013\177\001\002\000\004\021\175\001" +
    "\002\000\004\007\176\001\002\000\032\003\uffcc\005\uffcc" +
    "\006\uffcc\014\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\035\uffcc\036\uffcc\001\002\000\004\021\uffca" +
    "\001\002\000\032\003\uffd0\005\uffd0\006\uffd0\014\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0" +
    "\036\uffd0\001\002\000\020\011\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\020\uffc0\025\uffc0\040\111\001\002\000\010\007\uffa9" +
    "\021\uffa9\056\uffa9\001\002\000\026\007\uffa3\021\uffa3\050" +
    "\223\051\220\052\217\053\221\054\224\055\uffa3\056\uffa3" +
    "\057\222\001\002\000\004\021\211\001\002\000\012\007" +
    "\uffa6\021\uffa6\055\uffa6\056\uffa6\001\002\000\012\007\uffa8" +
    "\021\uffa8\055\207\056\uffa8\001\002\000\020\011\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\020\uffc0\025\uffc0\040\111\001\002" +
    "\000\012\007\uffa7\021\uffa7\055\uffa7\056\uffa7\001\002\000" +
    "\026\003\076\005\071\014\072\026\074\027\105\031\073" +
    "\032\102\033\103\035\077\036\070\001\002\000\032\003" +
    "\uffd3\005\uffd3\006\uffd3\014\uffd3\026\uffd3\027\uffd3\030\213" +
    "\031\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3\001\002\000" +
    "\026\003\076\005\071\014\072\026\074\027\105\031\073" +
    "\032\102\033\103\035\077\036\070\001\002\000\032\003" +
    "\uffd4\005\uffd4\006\uffd4\014\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\035\uffd4\036\uffd4\001\002\000" +
    "\020\011\uffc0\013\uffc0\014\uffc0\015\uffc0\020\uffc0\025\uffc0" +
    "\040\111\001\002\000\012\007\uffa5\021\uffa5\055\uffa5\056" +
    "\uffa5\001\002\000\020\011\uff95\013\uff95\014\uff95\015\uff95" +
    "\020\uff95\025\uff95\040\uff95\001\002\000\020\011\uff96\013" +
    "\uff96\014\uff96\015\uff96\020\uff96\025\uff96\040\uff96\001\002" +
    "\000\020\011\uff98\013\uff98\014\uff98\015\uff98\020\uff98\025" +
    "\uff98\040\uff98\001\002\000\020\011\uff99\013\uff99\014\uff99" +
    "\015\uff99\020\uff99\025\uff99\040\uff99\001\002\000\020\011" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\020\uff9a\025\uff9a\040\uff9a" +
    "\001\002\000\020\011\uff97\013\uff97\014\uff97\015\uff97\020" +
    "\uff97\025\uff97\040\uff97\001\002\000\012\007\uffa4\021\uffa4" +
    "\055\uffa4\056\uffa4\001\002\000\010\007\uffab\021\uffab\056" +
    "\227\001\002\000\020\011\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\020\uffc0\025\uffc0\040\111\001\002\000\010\007\uffaa\021" +
    "\uffaa\056\uffaa\001\002\000\006\007\uffc8\014\072\001\002" +
    "\000\006\007\uffc9\021\uffc9\001\002\000\004\007\234\001" +
    "\002\000\022\007\uffc6\011\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\020\uffc0\025\uffc0\040\111\001\002\000\004\007\237\001" +
    "\002\000\004\007\uffc7\001\002\000\006\014\072\021\uffc8" +
    "\001\002\000\004\021\241\001\002\000\026\003\076\005" +
    "\071\014\072\026\074\027\105\031\073\032\102\033\103" +
    "\035\077\036\070\001\002\000\032\003\uffd2\005\uffd2\006" +
    "\uffd2\014\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\035\uffd2\036\uffd2\001\002\000\060\007\uffa0\010" +
    "\uffa0\020\uffa0\021\uffa0\023\245\024\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\043\246\044\uffa0\045\uffa0\046\uffa0\047" +
    "\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0" +
    "\056\uffa0\057\uffa0\001\002\000\060\007\uff9f\010\uff9f\020" +
    "\uff9f\021\uff9f\023\uff9f\024\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050" +
    "\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f" +
    "\057\uff9f\001\002\000\020\011\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\020\uffc0\025\uffc0\040\111\001\002\000\004\014\247" +
    "\001\002\000\060\007\uff9d\010\uff9d\020\uff9d\021\uff9d\023" +
    "\uff9d\024\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\001\002" +
    "\000\004\024\251\001\002\000\060\007\uff9c\010\uff9c\020" +
    "\uff9c\021\uff9c\023\uff9c\024\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050" +
    "\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\001\002\000\030\003\076\005\071\006\253\014" +
    "\072\026\074\027\105\031\073\032\102\033\103\035\077" +
    "\036\070\001\002\000\032\003\uffcb\005\uffcb\006\uffcb\014" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\035\uffcb\036\uffcb\001\002\000\004\014\072\001\002\000" +
    "\004\021\256\001\002\000\004\007\257\001\002\000\032" +
    "\003\uffcd\005\uffcd\006\uffcd\014\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\036\uffcd\001\002" +
    "\000\006\010\uffe7\021\uffe7\001\002\000\010\010\uffe2\021" +
    "\uffe2\023\262\001\002\000\004\024\264\001\002\000\006" +
    "\010\uffe4\021\uffe4\001\002\000\006\010\uffe3\021\uffe3\001" +
    "\002\000\004\005\uffde\001\002\000\004\014\267\001\002" +
    "\000\006\005\uffdd\034\041\001\002\000\004\005\271\001" +
    "\002\000\006\005\uffe8\014\uffe8\001\002\000\006\005\273" +
    "\014\014\001\002\000\012\006\uffdb\014\uffdb\016\uffdb\022" +
    "\uffdb\001\002\000\012\006\301\014\014\016\275\022\054" +
    "\001\002\000\006\014\014\022\054\001\002\000\012\006" +
    "\uffda\014\uffda\016\uffda\022\uffda\001\002\000\012\006\uffdc" +
    "\014\uffdc\016\uffdc\022\uffdc\001\002\000\012\006\uffd9\014" +
    "\uffd9\016\uffd9\022\uffd9\001\002\000\004\006\302\001\002" +
    "\000\014\005\uffdf\012\uffdf\014\uffdf\016\uffdf\017\uffdf\001" +
    "\002\000\004\014\304\001\002\000\004\020\305\001\002" +
    "\000\010\010\uffe5\014\014\021\uffe5\001\002\000\006\010" +
    "\063\021\307\001\002\000\004\007\310\001\002\000\012" +
    "\006\uffe1\014\uffe1\016\uffe1\022\uffe1\001\002\000\010\006" +
    "\312\014\014\022\054\001\002\000\004\002\001\001\002" +
    "\000\006\007\uffef\023\uffef\001\002\000\006\007\315\023" +
    "\316\001\002\000\014\005\ufff3\012\ufff3\014\ufff3\016\ufff3" +
    "\017\ufff3\001\002\000\004\024\317\001\002\000\006\007" +
    "\ufff0\023\ufff0\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\006\001\001\000\016\007\011" +
    "\010\017\011\014\012\016\013\015\014\007\001\001\000" +
    "\002\001\001\000\004\005\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\026\001\001\000\002\001\001" +
    "\000\004\015\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\036\001\001\000\002\001" +
    "\001\000\004\035\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\043\001\001\000\006\011\045\014" +
    "\007\001\001\000\004\005\046\001\001\000\002\001\001" +
    "\000\010\014\047\022\050\030\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\057\017\060\032\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\057\032" +
    "\257\001\001\000\004\031\064\001\001\000\006\011\045" +
    "\014\007\001\001\000\004\041\066\001\001\000\010\040" +
    "\074\050\077\061\100\001\001\000\002\001\001\000\004" +
    "\041\251\001\001\000\004\047\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\157\060\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\042\107\043\111" +
    "\071\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\067\115\070\154\001\001\000\002" +
    "\001\001\000\004\071\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\067\115\070\114\001\001\000\004" +
    "\026\153\001\001\000\006\050\122\063\116\001\001\000" +
    "\004\027\150\001\001\000\004\014\140\001\001\000\002" +
    "\001\001\000\006\042\136\071\106\001\001\000\004\051" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\042\130\066\127\071\106\001\001\000" +
    "\002\001\001\000\004\065\131\001\001\000\004\064\133" +
    "\001\001\000\006\042\134\071\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\141\001\001\000\002\001" +
    "\001\000\006\042\143\071\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\042\167\071\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\130\066\165\071\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\171\071\106\001\001\000\004\045\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\042\202\053\204\055\201\057\203\071\106\001" +
    "\001\000\004\056\225\001\001\000\006\025\214\052\215" +
    "\001\001\000\002\001\001\000\004\054\205\001\001\000" +
    "\002\001\001\000\010\042\202\053\207\071\106\001\001" +
    "\000\002\001\001\000\010\040\211\050\077\061\100\001" +
    "\001\000\002\001\001\000\010\040\213\050\077\061\100" +
    "\001\001\000\002\001\001\000\006\042\224\071\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\042\202\053\204\055\227\071\106\001\001\000\002\001" +
    "\001\000\010\044\232\050\077\061\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\234\042\202\053" +
    "\204\055\201\057\235\071\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\237\050\077\061\231\001" +
    "\001\000\002\001\001\000\010\040\241\050\077\061\100" +
    "\001\001\000\002\001\001\000\004\046\243\001\001\000" +
    "\002\001\001\000\006\042\247\071\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\040\074\050\077\061\100\001\001\000\002" +
    "\001\001\000\004\050\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\267\001\001\000\002\001\001\000\004\031\271\001" +
    "\001\000\006\011\045\014\007\001\001\000\004\036\273" +
    "\001\001\000\014\014\047\022\050\030\275\034\277\037" +
    "\276\001\001\000\006\014\047\022\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\057\017\305\032\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\047" +
    "\022\050\030\052\001\001\000\002\001\001\000\004\020" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // MulOp ::= MOD 
            {
              MulOp RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*MulOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // MulOp ::= DIV 
            {
              MulOp RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*MulOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MulOp ::= MUL 
            {
              MulOp RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*MulOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // AddOp ::= MINUS 
            {
              AddOp RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*AddOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // AddOp ::= PLUS 
            {
              AddOp RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*AddOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RelOp ::= LESSEQUAL 
            {
              RelOp RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RelOp ::= LESS 
            {
              RelOp RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RelOp ::= GREEQUAL 
            {
              RelOp RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RelOp ::= GRE 
            {
              RelOp RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RelOp ::= ISNOTEQUAL 
            {
              RelOp RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RelOp ::= ISEQUAL 
            {
              RelOp RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // AssignOp ::= EQUAL 
            {
              AssignOp RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*AssignOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Designator ::= LBRACKET Expr RBRACKET 
            {
              Designator RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Designator ::= DOT IDENT 
            {
              Designator RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DesignatorList ::= 
            {
              DesignatorList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*DesignatorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DesignatorList ::= DesignatorList Designator 
            {
              DesignatorList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*DesignatorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DesignatorExpr ::= IDENT DesignatorList 
            {
              DesignatorExpr RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*DesignatorExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DesignatorPars ::= 
            {
              DesignatorPars RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*DesignatorPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DesignatorPars ::= LPAREN ActParsExpression RPAREN 
            {
              DesignatorPars RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*DesignatorPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondFactExpr ::= 
            {
              CondFactExpr RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*CondFactExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondFactExpr ::= RelOp Expr 
            {
              CondFactExpr RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*CondFactExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondFact ::= Expr CondFactExpr 
            {
              CondFact RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondFactList ::= 
            {
              CondFactList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*CondFactList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondFactList ::= CondFactList AND CondFact 
            {
              CondFactList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*CondFactList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondTerm ::= CondFact CondFactList 
            {
              CondTerm RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondTermList ::= 
            {
              CondTermList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*CondTermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondTermList ::= CondTermList OR CondTerm 
            {
              CondTermList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*CondTermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Condition ::= CondTerm CondTermList 
            {
              Condition RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DesignatorStatement ::= MINUSMINUS 
            {
              DesignatorStatement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DesignatorStatement ::= PLUSPLUS 
            {
              DesignatorStatement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorStatement ::= LPAREN ActParsExpression RPAREN 
            {
              DesignatorStatement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DesignatorStatement ::= AssignOp Expr 
            {
              DesignatorStatement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DesignatorStatementExpr ::= DesignatorExpr DesignatorStatement 
            {
              DesignatorStatementExpr RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*DesignatorStatementExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FactorExpr ::= LBRACKET Expr RBRACKET 
            {
              FactorExpr RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*FactorExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Factor ::= LPAREN Expr RPAREN 
            {
              Factor RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Factor ::= NEW Type FactorExpr 
            {
              Factor RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Factor ::= BOOLCONST 
            {
              Factor RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Factor ::= CHARCONST 
            {
              Factor RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Factor ::= NUMCONST 
            {
              Factor RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Factor ::= DesignatorExpr DesignatorPars 
            {
              Factor RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ActPars ::= COMMA Expr 
            {
              ActPars RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ActParsList ::= 
            {
              ActParsList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*ActParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ActParsList ::= ActParsList ActPars 
            {
              ActParsList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*ActParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ActParsExpression ::= 
            {
              ActParsExpression RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*ActParsExpression*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ActParsExpression ::= Expr ActParsList 
            {
              ActParsExpression RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*ActParsExpression*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TermList ::= 
            {
              TermList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*TermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TermList ::= TermList Factor MulOp 
            {
              TermList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*TermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Term ::= TermList Factor 
            {
              Term RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExprList ::= 
            {
              ExprList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*ExprList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExprList ::= ExprList Term AddOp 
            {
              ExprList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*ExprList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= MINUS ExprList Term 
            {
              Expr RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= ExprList Term 
            {
              Expr RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OptionalExpr ::= 
            {
              OptionalExpr RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*OptionalExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OptionalExpr ::= Expr 
            {
              OptionalExpr RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*OptionalExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OptionalCondition ::= 
            {
              OptionalCondition RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*OptionalCondition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OptionalCondition ::= Condition 
            {
              OptionalCondition RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*OptionalCondition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OptionalDesignatorStatement ::= 
            {
              OptionalDesignatorStatement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*OptionalDesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OptionalDesignatorStatement ::= DesignatorStatementExpr 
            {
              OptionalDesignatorStatement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*OptionalDesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OptionalPrintParam ::= COMMA NUMCONST 
            {
              OptionalPrintParam RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*OptionalPrintParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= LBRACE StatementList RBRACE 
            {
              Statement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= PRINT LPAREN Expr OptionalPrintParam RPAREN SEMI 
            {
              Statement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= READ LPAREN DesignatorExpr RPAREN SEMI 
            {
              Statement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statement ::= RETURN OptionalExpr SEMI 
            {
              Statement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= CONTINUE SEMI 
            {
              Statement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= error SEMI 
            {
              Statement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= BREAK SEMI 
            {
              Statement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= FOR LPAREN OptionalDesignatorStatement SEMI OptionalCondition SEMI OptionalDesignatorStatement RPAREN Statement 
            {
              Statement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= IF LPAREN Condition RPAREN Statement 
            {
              Statement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= IF LPAREN Condition RPAREN Statement ELSE Statement 
            {
              Statement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= DesignatorStatementExpr SEMI 
            {
              Statement RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // StatementList ::= 
            {
              StatementList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ClassDecl ::= CLASS IDENT Extends LBRACE VarDeclList LBRACE MethodDeclList RBRACE RBRACE 
            {
              ClassDecl RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AllMethodDecl ::= AbstractMethodDecl 
            {
              AllMethodDecl RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*AllMethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AllMethodDecl ::= MethodDecl 
            {
              AllMethodDecl RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*AllMethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AllMethodsDeclList ::= 
            {
              AllMethodsDeclList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*AllMethodsDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AllMethodsDeclList ::= AllMethodsDeclList AllMethodDecl 
            {
              AllMethodsDeclList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*AllMethodsDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Extends ::= 
            {
              Extends RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Extends*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Extends ::= EXTENDS IDENT 
            {
              Extends RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Extends*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AbstractClassDecl ::= ABSTRACT CLASS IDENT Extends LBRACE VarDeclList LBRACE AllMethodsDeclList RBRACE RBRACE 
            {
              AbstractClassDecl RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*AbstractClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= IDENT 
            {
              Type RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AbstractMethodDecl ::= ABSTRACT TypeVoid IDENT LPAREN FormParsList RPAREN SEMI 
            {
              AbstractMethodDecl RESULT = null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		TypeVoid varType = (TypeVoid)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*AbstractMethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EmptyBrackets ::= 
            {
              EmptyBrackets RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*EmptyBrackets*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EmptyBrackets ::= LBRACKET RBRACKET 
            {
              EmptyBrackets RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*EmptyBrackets*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FormPars ::= Type IDENT EmptyBrackets 
            {
              FormPars RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FormParsList ::= 
            {
              FormParsList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*FormParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FormParsList ::= FormPars 
            {
              FormParsList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*FormParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FormParsList ::= FormParsList COMMA FormPars 
            {
              FormParsList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*FormParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDeclList ::= 
            {
              VarDeclList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDeclList ::= VarDeclList VarDecl 
            {
              VarDeclList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodDecl ::= TypeVoid IDENT LPAREN FormParsList RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              MethodDecl RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MethodDeclList ::= 
            {
              MethodDeclList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              MethodDeclList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeVoid ::= VOIDD 
            {
              TypeVoid RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*TypeVoid*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeVoid ::= Type 
            {
              TypeVoid RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*TypeVoid*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ArrayDecl ::= 
            {
              ArrayDecl RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*ArrayDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ArrayDecl ::= ArrayDecl LBRACKET RBRACKET 
            {
              ArrayDecl RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*ArrayDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarIdents ::= 
            {
              VarIdents RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*VarIdents*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarIdents ::= VarIdents COMMA IDENT ArrayDecl 
            {
              VarIdents RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*VarIdents*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= Type IDENT ArrayDecl SEMI 
            {
              VarDecl RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstValue ::= BOOLCONST 
            {
              ConstValue RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*ConstValue*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstValue ::= CHARCONST 
            {
              ConstValue RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*ConstValue*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstValue ::= NUMCONST 
            {
              ConstValue RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*ConstValue*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstIdents ::= 
            {
              ConstIdents RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*ConstIdents*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstIdents ::= ConstIdents COMMA IDENT EQUAL ConstValue 
            {
              ConstIdents RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*ConstIdents*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= CONST Type IDENT EQUAL ConstValue ConstIdents SEMI 
            {
              ConstDecl RESULT = null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= ClassDecl 
            {
              Decl RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= AbstractClassDecl 
            {
              Decl RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= VarDecl 
            {
              Decl RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= ConstDecl 
            {
              Decl RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= 
            {
              DeclList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= DeclList Decl 
            {
              DeclList RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG IDENT DeclList LBRACE MethodDeclList RBRACE 
            {
              Program RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

